buildscript {
    ext.java_version = '11'
    ext.kotlin_version = '1.3.72'
    ext.ktor_version = '1.3.0'
    ext.kotest_version = '4.0.4'
    ext.javafx_plugin_version = '0.0.8'
    ext.jlink_version = '2.17.7'
    ext.jfoenix_version = '9.0.9'
    ext.commons_lang3_version = '3.5'
    ext.jnativehook_version = '2.1.0'
    ext.log4j_version = '1.2.17'
    ext.slf4j_version = '1.7.5'
    ext.fontawesomefx_fontawesome_version = '4.7.0-9.1.2'
    ext.fontawesomefx_commons_version = '9.1.2'
    ext.opencv_version = '4.3.0-1'
    ext.commons_io_version = '2.6'
    ext.jackson_module_kotlin_version = '2.10.3'


    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://dl.bintray.com/kotlin/kotlinx"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id 'application'
    id 'java'
    id 'idea'
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id 'org.openjfx.javafxplugin' version "$javafx_plugin_version"
    id 'org.beryx.jlink' version "$jlink_version"
}

idea {
    module {
        inheritOutputDirs = true
    }
}

group 'com.patres'
version '0.1'

project.version = "0.1"
project.description = "Tool for automation"
project.ext.buildDate = new Date()

sourceCompatibility = "$java_version"
javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
}
repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
}

dependencies {
    testImplementation group: 'io.kotest', name: 'kotest-runner-junit5-jvm', version: "$kotest_version"
    testImplementation group: 'io.kotest', name: 'kotest-assertions-core-jvm', version: "$kotest_version"

    compile "com.jfoenix:jfoenix:$jfoenix_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "org.apache.commons:commons-lang3:$commons_lang3_version"
    compile "com.1stleg:jnativehook:$jnativehook_version"

    compile "log4j:log4j:$log4j_version"
    compile "org.slf4j:slf4j-api:$slf4j_version"
    compile "org.slf4j:slf4j-log4j12:$slf4j_version"

    compile "de.jensd:fontawesomefx-fontawesome:$fontawesomefx_fontawesome_version"
    compile "de.jensd:fontawesomefx-commons:$fontawesomefx_commons_version"

    compile "commons-io:commons-io:$commons_io_version"
    compile "org.openpnp:opencv:$opencv_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_module_kotlin_version"
}

mainClassName = 'automationBoot/com.patres.automation.ApplicationLauncher'

compileKotlin {
    kotlinOptions {
        jvmTarget = "$java_version"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "$java_version"
    }
}

run {
    jvmArgs = [
            "--add-opens=java.base/java.lang=opencv",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
            "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
            "--add-opens=javafx.controls/javafx.scene.control=automationBoot",
            "--add-opens=javafx.graphics/javafx.scene=automationBoot",
            "--add-opens=javafx.graphics/javafx.scene.control=automationBoot"

    ]
}

jlink {
    addExtraDependencies("javafx")
    mergedModule {
        additive = true
        uses "kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper"
        uses "kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition"
        uses "kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader"
    }

    launcher {
        name = 'automationBoot'
        jvmArgs = [
                "--add-opens=java.base/java.lang=opencv",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
                "--add-opens=javafx.controls/javafx.scene.control=automationBoot",
                "--add-opens=javafx.graphics/javafx.scene=automationBoot",
                "--add-opens=javafx.graphics/javafx.scene.control=automationBoot"
        ]
    }

    jpackage {
        installerOptions = [
                '--description', project.description,
                '--copyright', 'Copyrigth 2020 Patres - Patryk Piechaczek'
        ]
//        installerType = project.findProperty('installerType') // we will pass this from the command line (example: -PinstallerType=msi)
        installerType = 'msi'
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/image/icon.ico']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
//        if (installerType == 'pkg') {
//            imageOptions += ['--icon', 'src/main/resources/image/icon.png']
//        }
//        if (installerType in ['deb', 'rpm']) {
//            imageOptions += ['--icon', 'src/main/resources/image/icon.png']
//            installerOptions += [
//                    '--linux-shortcut'
//            ]
//        }
//        if (installerType == 'deb') {
//            installerOptions += [
//                    '--linux-deb-maintainer', 'app@test.it'
//            ]
//        }
//        if (installerType == 'rpm') {
//            installerOptions += [
//                    '--linux-rpm-license-type', 'GPLv3'
//            ]
//        }
    }
}

//jpackage {
//    doFirst {
//        project.getProperty('installerType') // throws exception if its missing
//    }
//}

test {
    useJUnitPlatform()
}