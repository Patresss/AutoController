buildscript {
    ext.kotlin_version = '1.3.61'
    ext.ktor_version = '1.3.0-rc'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://dl.bintray.com/kotlin/kotlinx"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id 'application'
    id 'java'
    id 'idea'
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.17.0'

//    id 'kotlin-allopen'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

group 'com.patres'
version '1.0-SNAPSHOT'

sourceCompatibility = 11
javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}
repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
}


dependencies {
    compile 'com.jfoenix:jfoenix:9.0.9'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.1stleg:jnativehook:2.1.0'

    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
//    compile 'org.apache.logging.log4j:log4j-core:2.13.0'
//    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.0'

//    compile 'org.apache.logging.log4j:log4j-jul:2.10.0'
//    compile 'org.slf4j:log4j-over-slf4j:1.7.25'

    compile 'de.jensd:fontawesomefx-emojione:2.2.7-2'
    compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-5'
    compile 'de.jensd:fontawesomefx-icons525:3.0.0-4'
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-4'
    compile 'de.jensd:fontawesomefx-materialicons:2.2.0-5'
    compile 'de.jensd:fontawesomefx-octicons:4.3.0-5'
    compile 'de.jensd:fontawesomefx-weathericons:2.0.10-5'
    compile 'de.jensd:fontawesomefx-commons:9.1.2'

//    compile group: 'io.ktor', name: 'ktor-server-core', version: '1.3.0-rc'

//    compile "io.ktor:ktor-server-netty:$ktor_version"

    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    compile group: 'org.openpnp', name: 'opencv', version: '3.4.2-1'

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.10.+"

}

mainClassName = 'automationBoot/com.patres.automation.ApplicationLauncher'
//jar {
//    manifest {
//        attributes "Main-Class": "com.patres.automation.Main"
//    }
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}


compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

//jar {
//    manifest {
//        attributes "Main-Class": "com.patres.automation.ApplicationLauncher"
//    }
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}
//
//task libs(type: Sync) {
//    from configurations.runtime
//    into "$buildDir/deplibs"
//}


run {
    jvmArgs = [
        "--add-opens=java.base/java.lang=opencv",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-opens=javafx.controls/javafx.scene.control=automationBoot"
    ]
}

jlink {
    addExtraDependencies("javafx")
    mergedModule {
        additive = true
        uses "kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper"
        uses "kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition"
        uses "kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader"
    }

    launcher {
        name = 'automationBoot'
        jvmArgs = [
                "--add-opens=java.base/java.lang=opencv",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
                "--add-opens=javafx.controls/javafx.scene.control=automationBoot"
        ]
    }
}

//
//
//ext {
//    publishedVersion = project.version
//    bundlerScript = file('bin/build-package.sh')
//    santulatorLibraryPath = file("${buildDir}/libraries")
//    mainJar = project(':gui').jar.outputs.files[0].name
//    bundlePath = file("${buildDir}/bundle")
//    fileAssociations = file("${buildDir}/resources/main/file-associations.properties")
//    extraBundlerArguments = []
//    if (operatingSystem.isMacOsX()) {
////        packageType = 'pkg'
////        appIcon = file('icons/mac/Santulator.icns')
////        sessionIcon = file('icons/mac/SantulatorSession.icns')
////        extraBundlerArguments = ['--mac-sign']
//    } else if (operatingSystem.isLinux()) {
////        packageType = 'deb'
////        appIcon = file('icons/App1024.png')
////        sessionIcon = file('icons/Doc1024.png')
//    } else if (operatingSystem.isWindows()) {
//        appIcon = file('icons/windows/Santulator.ico')
//        sessionIcon = file('icons/windows/SantulatorSession.ico')
//        bundlerScript = file('bin/build-package.bat')
//        generatedInnoSetupFile = file("${buildDir}/resources/main/santulator.iss")
//        windowsExecutable = file("${bundlePath}/Santulator/Santulator.exe")
//        bundleContent = file("${bundlePath}/Santulator/*")
//        // Locations for the DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
//        windowsDllDirectory = file('C:\\Windows\\System32')
//        windowsDllMSVCP140 = file("${windowsDllDirectory}/MSVCP140.dll")
//        windowsDllVCRUNTIME140 = file("${windowsDllDirectory}/VCRUNTIME140.dll")
//    }
//    if (publishedVersion.endsWith('-SNAPSHOT')) {
//        publishedVersion = '0.0.1'
//    }
//}
//
////task recreateIconMacApp(type: Exec) {
////    description 'Regenerate the Mac application icon'
////    commandLine 'sh', file('bin/mac-icon.sh'), file('icons/App1024.png'), file('icons/mac'), 'Santulator'
////}
////
////task recreateIconMacSession(type: Exec) {
////    description 'Regenerate the Mac session file icon'
////    commandLine 'sh', file('bin/mac-icon.sh'), file('icons/Doc1024.png'), file('icons/mac'), 'SantulatorSession'
////}
//
//task recreateIconWindowsApp(type: Exec) {
//    description 'Regenerate the Windows application icon'
//    commandLine 'sh', file('bin/windows-icon.sh'), file('icons/App1024.png'), file('icons/windows'), 'Santulator'
//}
//
//task recreateIconWindowsSession(type: Exec) {
//    description 'Regenerate the Windows session file icon'
//    commandLine 'sh', file('bin/windows-icon.sh'), file('icons/Doc1024.png'), file('icons/windows'), 'SantulatorSession'
//}
//
//task recreateIcons(dependsOn: [recreateIconMacApp, recreateIconMacSession, recreateIconWindowsApp, recreateIconWindowsSession]) {
//    description 'Regenerate all the application bundle icons'
//}
//
//task checkBundlingEnvironment {
//    description 'Check the environment for building the installable bundle'
//    doLast {
//        if (JavaVersion.current() != JavaVersion.VERSION_11) {
//            throw new GradleException("You need JDK 11 to build the Santulator installable bundle")
//        }
//        if (project.hasProperty('javafxJmodsPath')) {
//            def modsPath = file("${javafxJmodsPath}")
//
//            if (modsPath.exists() && modsPath.isDirectory()) {
//                if (!modsPath.list({ d, f -> f ==~ /.*.jmod/ } as FilenameFilter)) {
//                    throw new GradleException("JavaFX modules directory '$modsPath' does not contain any '*.jmod' files")
//                }
//            } else {
//                throw new GradleException("JavaFX modules directory '$modsPath' not found")
//            }
//        } else {
//            throw new GradleException("Use -PjavafxJmodsPath=... to specify the directory containing the OpenJFX 11 JMod files")
//        }
//        if (operatingSystem.isWindows()) {
//            def javaHome = System.env.JAVA_HOME
//
//            if (javaHome) {
//                def javaExecutable = file("${javaHome}/bin/java.exe")
//                def packagerFile = file("${javaHome}/bin/jpackager.exe")
//                def jmodFile = file("${javaHome}/jmods/jdk.packager.jar")
//
//                if (!javaExecutable.exists()) {
//                    throw new GradleException("Unable to find Java executable '${javaExecutable}'")
//                }
//                if (!packagerFile.exists()) {
//                    throw new GradleException("Unable to find Java packager executable at '${packagerFile}'")
//                }
//                if (!jmodFile.exists()) {
//                    throw new GradleException("Unable to find Java packager module at '${jmodFile}'")
//                }
//                // Check existence of files for DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
//                if (!windowsDllMSVCP140.exists() || !windowsDllVCRUNTIME140.exists()) {
//                    throw new GradleException("Unable to find '${windowsDllMSVCP140}' and '${windowsDllVCRUNTIME140}' (see https://github.com/Santulator/Santulator/issues/5)")
//                }
//            } else {
//                throw new GradleException("JAVA_HOME must be set")
//            }
//        } else {
//            if (project.hasProperty('javaPackagerPath')) {
//                def packagerFile = file("${javaPackagerPath}/jpackager")
//
//                if (!packagerFile.exists() || !packagerFile.isFile()) {
//                    throw new GradleException("The Java Packager '$packagerFile' is missing")
//                }
//            } else {
//                throw new GradleException("Use -PjavaPackagerPath=... to specify the directory containing the Java Packager")
//            }
//        }
//    }
//}
//
//task createBundle(type: Exec, dependsOn: [copyDependencies, processResources, checkBundlingEnvironment]) {
//    description 'Build the installable bundle'
//    if (operatingSystem.isWindows()) {
//        commandLine 'cmd', '/c',
//                bundlerScript,
//                "${-> javafxJmodsPath}",
//                santulatorLibraryPath,
//                bundlePath,
//                mainJar,
//                publishedVersion,
//                appIcon
//    } else {
//        commandLine = ['sh',
//                       bundlerScript,
//                       "${-> file("${javaPackagerPath}/jpackager")}",
//                       packageType,
//                       "${-> file("${javafxJmodsPath}")}",
//                       santulatorLibraryPath,
//                       bundlePath,
//                       mainJar,
//                       publishedVersion,
//                       fileAssociations,
//                       appIcon,
//                       *extraBundlerArguments]
//    }
//}
//
//if (operatingSystem.isWindows()) {
//    processResources {
//        filesMatching('santulator.iss') {
//            filter ReplaceTokens, tokens: [
//                    'bundle.version': publishedVersion,
//                    'executable.location': windowsExecutable.toString(),
//                    'bundle.content': bundleContent.toString()
//            ]
//        }
//    }
//
//    task completeInnoSetup(dependsOn: processResources) {
//        doLast {
//            copy {
//                from 'icons/windows'
//                into "${bundlePath}/Santulator"
//                include 'SantulatorSession.ico'
//            }
//            // Copy files for DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
//            copy {
//                from windowsDllMSVCP140
//                from windowsDllVCRUNTIME140
//                into "${bundlePath}/Santulator"
//            }
//            println("Inno Setup file: ${generatedInnoSetupFile}")
//        }
//    }
//
//    createBundle.finalizedBy completeInnoSetup
//}