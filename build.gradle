buildscript {
    ext.kotlin_version = '1.3.61'
    ext.ktor_version = '1.3.0-rc'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://dl.bintray.com/kotlin/kotlinx"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id 'application'
    id 'java'
    id 'idea'
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.17.0'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

group 'com.patres'
version '0.1'

project.version = "0.1"
project.description = "Tool for automation"
project.ext.buildDate = new Date()

sourceCompatibility = 11
javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}
repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
}


dependencies {
    compile 'com.jfoenix:jfoenix:9.0.9'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.1stleg:jnativehook:2.1.0'

    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'

    compile 'de.jensd:fontawesomefx-emojione:2.2.7-2'
    compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-5'
    compile 'de.jensd:fontawesomefx-icons525:3.0.0-4'
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-4'
    compile 'de.jensd:fontawesomefx-materialicons:2.2.0-5'
    compile 'de.jensd:fontawesomefx-octicons:4.3.0-5'
    compile 'de.jensd:fontawesomefx-weathericons:2.0.10-5'
    compile 'de.jensd:fontawesomefx-commons:9.1.2'

//    compile group: 'io.ktor', name: 'ktor-server-core', version: '1.3.0-rc'
//    compile "io.ktor:ktor-server-netty:$ktor_version"

    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.openpnp', name: 'opencv', version: '3.4.2-1'
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.10.+"
}

mainClassName = 'automationBoot/com.patres.automation.ApplicationLauncher'

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

run {
    jvmArgs = [
        "--add-opens=java.base/java.lang=opencv",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-opens=javafx.controls/javafx.scene.control=automationBoot"
    ]
}

jlink {
    addExtraDependencies("javafx")
    mergedModule {
        additive = true
        uses "kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper"
        uses "kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition"
        uses "kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader"
    }

    launcher {
        name = 'automationBoot'
        jvmArgs = [
                "--add-opens=java.base/java.lang=opencv",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
                "--add-opens=javafx.controls/javafx.scene.control=automationBoot"
        ]
    }

    jpackage {
        installerOptions = [
                '--description', project.description,
                '--copyright', 'Copyrigth 2020 Patres - Patryk Piechaczek'
        ]
//        installerType = project.findProperty('installerType') // we will pass this from the command line (example: -PinstallerType=msi)
        installerType = 'msi'
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/image/icon.ico']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
//        if (installerType == 'pkg') {
//            imageOptions += ['--icon', 'src/main/resources/image/icon.png']
//        }
//        if (installerType in ['deb', 'rpm']) {
//            imageOptions += ['--icon', 'src/main/resources/image/icon.png']
//            installerOptions += [
//                    '--linux-shortcut'
//            ]
//        }
//        if (installerType == 'deb') {
//            installerOptions += [
//                    '--linux-deb-maintainer', 'app@test.it'
//            ]
//        }
//        if (installerType == 'rpm') {
//            installerOptions += [
//                    '--linux-rpm-license-type', 'GPLv3'
//            ]
//        }
    }
}

//jpackage {
//    doFirst {
//        project.getProperty('installerType') // throws exception if its missing
//    }
//}
